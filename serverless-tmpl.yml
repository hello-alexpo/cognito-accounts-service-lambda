# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cognito-accounts-service-lambda-dev

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  timeout: 300
  memorySize: 512

  # you can overwrite defaults here
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:AdminInitiateAuth"
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:cognito-idp'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'userpool/*'
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - 'Fn::Join':
          - ':'
          -
            - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/User'

# you can add packaging information here
package:
  artifact: target/accounts-service-0.0.1-SNAPSHOT-lambda.zip

functions:
  accountsService:
    handler: com.workingbit.accounts.LambdaHandler::handleRequest

    events:
      - http:
          path: /users/register
          method: post
      - http:
          path: /users/confirmRegistration
          method: post
      - http:
          path: /users/resendCode
          method: post
      - http:
          path: /users/authenticate
          method: post
      - http:
          path: /users/forgotPassword
          method: post
      - http:
          path: /users/confirmNewPassword
          method: post
      - http:
          path: /users/logout
          method: post

      - http:
          path: /test/echo
          method: get

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: User
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: arn:aws:dynamodb:*:*:table/User
        Roles:
          - Ref: IamRoleLambdaExecution
